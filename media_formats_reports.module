<?php

/**
 * @file
 * Contains the media_formats_reports.module.
 */

/**
 * Implements hook_theme().
 */
function media_formats_reports_theme($existing, $type, $theme, $path) {
  return [
    'media_formats_reports_chart' => [
      'variables' => ['form' => null],
    ],
  ];
}

/**
 * Default preprocessor function for the media_formats_reports_theme hook.
 */
function template_preprocess_media_formats_reports_chart(&$variables) {
  $variables['attributes'] = [
    'id' => ['media_formats_reports_chart'],
  ];
}

/**
 * Implements hook_page_attachments().
 */
function media_formats_reports_page_attachments(array &$attachments) {
  // $config = \Drupal::config('media_formats_reports.settings');
  $current_path = \Drupal::service('path.current')->getPath();

  if ($current_path == '/admin/reports/media_formats') {
    $pie_chart_data = media_formats_reports_get_data();
    $attachments['#attached']['library'][] = 'media_formats_reports/media_formats_reports_chart';
    $attachments['#attached']['drupalSettings']['media_formats_reports']['chart_data'] = $pie_chart_data;
  }
}

/**
 * @return object
 *   A Chart.js dataset object.
 */
function media_formats_reports_get_data() {
  if ($tempstore = \Drupal::service('user.private_tempstore')->get('media_formats_reports')) {
    $report_type = $tempstore->get('media_formats_reports_report_type');
  }
  elseif (is_null($report_type)) {
    $report_type = 'mimetype';
  }
  else {
    $report_type = 'mimetype';
  }

  $data_source_service_id = 'media_formats_reports.datasource.' . $report_type;
  $data_source = \Drupal::service($data_source_service_id);
  $format_counts = $data_source->getData();

  // Populate the Chart.js dataset object.
  $num_formats = count($format_counts);
  $colors = media_formats_reports_get_chart_colors($num_formats);
  $dataset = new StdClass();
  $dataset->data = array_values($format_counts);
  $dataset->backgroundColor = media_formats_reports_get_chart_colors($num_formats);
  $pie_chart_data = array(
    'labels' => array_keys($format_counts),
    'datasets' =>  array($dataset),
  );
  return $pie_chart_data;
}

/**
 * Generate a set of random colors to use in the pie chart.
 *
 * @param int $length
 *   The length of the array to generate.
 *
 * @return array
 *    An array of RGB values in the format required by Chart.js, e.g.,
 *    array('rgba(255, 99, 132)', 'rgba(54, 162, 235)', 'rgba(255, 206, 86)').
 */
function media_formats_reports_get_chart_colors($length) {
  $colors = [];
  for ($i = 1; $i <= $length; $i++) {
    $rgb_color = []; 
    foreach (['r', 'g', 'b'] as $color) {
      $rgb_color[$color] = rand(0, 255);
    }
    $colors[] = 'rgba(' . implode(',', $rgb_color) . ')';
  }
  return $colors;
}
